["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "],"~$Float32Array",["^ "],"~$self",["^ "],"~$Int8Array",["^ "],"~$Int16Array",["^ "],"~$Uint32Array",["^ "],"~$Uint8Array",["^ "],"~$Uint8ClampedArray",["^ "],"~$window",["^ "],"~$Int32Array",["^ "],"~$Uint16Array",["^ "],"~$Float64Array",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$thi.ng.typedarrays.core","~:imports",null,"~:requires",null,"~:cljs.spec/speced-vars",[],"~:uses",null,"~:defs",["^ ","~$uint16-view",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","~:line",169,"~:column",7,"~:end-line",169,"~:end-column",18,"~:arglists",["~#list",["~$quote",["^R",[["~$a"],["~$a","~$offset","~$len"]]]]],"~:doc","Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","~:top-fn",["^ ","~:variadic",false,"~:max-fixed-arity",3,"~:method-params",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"~:arglists-meta",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/uint16-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",18,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"~:protocol-impl",null,"^[",["^R",[null,null]],"^N",1,"^M",169,"^O",169,"^Y",3,"~:fn-var",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Uint16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint8",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",84,"^N",7,"^O",84,"^P",12,"^Q",["^R",["^S",["^R",[["~$size-or-coll"]]]]],"^V","Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/uint8","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",12,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",84,"^O",84,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$typed-arrays-supported?",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",3,"^N",7,"^O",3,"^P",30,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Returns true if JS runtime supports typed arrays"],"^B","~$thi.ng.typedarrays.core/typed-arrays-supported?","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",30,"^Z",["^R",[[]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",3,"^O",3,"^Y",0,"^12",true,"^Q",["^R",["^S",["^R",[[]]]]],"^V","Returns true if JS runtime supports typed arrays"],"~$uint8-clamped",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",107,"^N",7,"^O",107,"^P",20,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/uint8-clamped","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",20,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",107,"^O",107,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint8ClampedArray of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int32",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",176,"^N",7,"^O",176,"^P",12,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/int32","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",12,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",176,"^O",176,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Int32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$uint32-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",215,"^N",7,"^O",215,"^P",18,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/uint32-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",18,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",215,"^O",215,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Uint32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$int16",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",130,"^N",7,"^O",130,"^P",12,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/int16","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",12,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",130,"^O",130,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Int16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$float32",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",222,"^N",7,"^O",222,"^P",14,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/float32","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",14,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",222,"^O",222,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Float32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$array-types",["^ ","^B","~$thi.ng.typedarrays.core/array-types","^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",7,"^N",1,"^O",7,"^P",27,"~:private",true,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",7,"^N",16,"^O",7,"^P",27,"^1D",true],"~:tag","~$cljs.core/IMap"],"~$float64",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",245,"^N",7,"^O",245,"^P",14,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/float64","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",14,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",245,"^O",245,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Float64Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int32-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",192,"^N",7,"^O",192,"^P",17,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/int32-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",17,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",192,"^O",192,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Int32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$array-type",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",25,"^N",7,"^O",25,"^P",17,"^Q",["^R",["^S",["^R",[["~$x"]]]]]],"^B","~$thi.ng.typedarrays.core/array-type","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",17,"^Z",["^R",[["~$x"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",25,"^O",25,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["~$x"]]]]]],"~$int8-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",77,"^N",7,"^O",77,"^P",16,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/int8-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",16,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",77,"^O",77,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Int8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint16",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",153,"^N",7,"^O",153,"^P",13,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/uint16","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",13,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",153,"^O",153,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint16Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int8",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",61,"^N",7,"^O",61,"^P",11,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/int8","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",11,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",61,"^O",61,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Int8Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$int16-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",146,"^N",7,"^O",146,"^P",17,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/int16-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",17,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",146,"^O",146,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Int16Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint32",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",199,"^N",7,"^O",199,"^P",13,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"^B","~$thi.ng.typedarrays.core/uint32","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",13,"^Z",["^R",[["^14"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",199,"^O",199,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["^14"]]]]],"^V","Creates a native Uint32Array of the given size or from `coll`\n  If arg already is a typed array then a copy is created."],"~$float32-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",238,"^N",7,"^O",238,"^P",19,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/float32-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",19,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",238,"^O",238,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Float32Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$typed-array?",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",18,"^N",7,"^O",18,"^P",19,"^Q",["^R",["^S",["^R",[["~$x"]]]]],"^V","Returns truthy value if the given arg is a typed array instance"],"^B","~$thi.ng.typedarrays.core/typed-array?","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",19,"^Z",["^R",[["~$x"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",18,"^O",18,"^Y",1,"^12",true,"^Q",["^R",["^S",["^R",[["~$x"]]]]],"^V","Returns truthy value if the given arg is a typed array instance"],"~$float64-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",261,"^N",7,"^O",261,"^P",19,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/float64-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",19,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",261,"^O",261,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Float64Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint8-clamped-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",123,"^N",7,"^O",123,"^P",25,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/uint8-clamped-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",25,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",123,"^O",123,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Uint8ClampedArray view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."],"~$uint8-view",["^ ","^J",null,"^K",["^ ","^L","/home/gabriele/Templates/CLOJURE/hello-world.core/resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^M",100,"^N",7,"^O",100,"^P",17,"^Q",["^R",["^S",["^R",[["~$a"],["~$a","^T","^U"]]]]],"^V","Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length.","^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]]],"^B","~$thi.ng.typedarrays.core/uint8-view","^X",false,"^L","resources/public/cljs-out/dev/thi/ng/typedarrays/core.cljs","^P",17,"^W",["^ ","^X",false,"^Y",3,"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^[",["^R",[null,null]]],"^Z",["^R",[["~$a"],["~$a","^T","^U"]]],"^11",null,"^[",["^R",[null,null]],"^N",1,"^M",100,"^O",100,"^Y",3,"^12",true,"^Q",["^R",[["~$a"],["~$a","^T","^U"]]],"^V","Creates a Uint8Array view of the given typed array's\n  underlying ArrayBuffer, optionally from given byte offset\n  and item length."]],"~:cljs.spec/registry-ref",[],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^A",["~:int32","~:uint8-clamped","~:int16","~:float32","~:float64","~:else","~:uint16","~:array","~:int8","~:uint32","~:uint8"]],"~:order",["^2=","^2C","^2A","^2:","^2?","^2;","^2B","^2<","^29","^2@","^2>"]],"^V",null]